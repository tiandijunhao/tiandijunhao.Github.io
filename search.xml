<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spglib安装教程</title>
      <link href="/2020/04/18/spglib-an-zhuang/"/>
      <url>/2020/04/18/spglib-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Spglib安装教程"><a href="#Spglib安装教程" class="headerlink" title="Spglib安装教程"></a><strong>Spglib安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="https://atztogo.github.io/spglib/index.html" target="_blank" rel="noopener">https://atztogo.github.io/spglib/index.html</a><br>C版本下载：<a href="https://github.com/atztogo/spglib" target="_blank" rel="noopener">https://github.com/atztogo/spglib</a><br>python版本下载：<a href="https://pypi.org/project/spglib/" target="_blank" rel="noopener">https://pypi.org/project/spglib/</a></p><h2 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h2><p><strong>C版本安装编译</strong></p><p>Cmake方法</p><p>1 解压进入文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xvfz spglib-1.9.8.tar.gz<span class="token function">cd</span> spglib-1.9.8</code></pre><p>2 建立_build文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> _build <span class="token operator">&amp;&amp;</span> _buildcmake -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">..</span><span class="token function">make</span><span class="token function">make</span> DESTDIR<span class="token operator">=</span>/some/where <span class="token function">install</span><span class="token comment" spellcheck="true">#路径根据需要设置</span></code></pre><p>注：头文件spglib.h在安装路径include文件夹，如果include文件夹中没有spglib文件夹，建议手动建立一个并复制spglib.h文件到里面。这在后面的安装thirdorder软件时是有用的。</p><p><strong>Python库版本安装</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在线安装</span>pip <span class="token function">install</span> spglib<span class="token comment" spellcheck="true">#手动安装</span><span class="token function">tar</span> -zxvf  spglib-1.14.1.post0.tar.gz spglib<span class="token function">cd</span> ./spglibpython setup.py <span class="token function">install</span></code></pre><p><strong>Spglib的具体使用方法详见官网介绍，主要是作为库来调用</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境安装教程</title>
      <link href="/2020/04/18/python-huan-jing/"/>
      <url>/2020/04/18/python-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="Anaconda安装（python环境安装）"><a href="#Anaconda安装（python环境安装）" class="headerlink" title="Anaconda安装（python环境安装）"></a><strong>Anaconda安装（python环境安装）</strong></h2><p>注：Anaconda里python的第三方包十分丰富，包含了所有的常用包，省却了许多麻烦。本人安装的是python3.6版的Anaconda</p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">https://www.anaconda.com/distribution/</a></p><p>老版本下载网址（清华大学镜像）：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 编译文件</p><pre class=" language-sh"><code class="language-sh">bash Anaconda3-5.2.0-Linux-x86_64.sh ##根据提示选择##注：其中会问你是否添加到环境变量，最好选择yes。source ~/.bashrc #直接配置环境变量##若选择novim ~/.bashrc #按i进入编辑模式###添加如下命令export PATH=/$dir/bin:$PATH  #$dir:Anaconda安装位置source ~/.bashrc</code></pre><p>2 测试</p><pre class=" language-sh"><code class="language-sh">python #终端运行，可查看python版本，按住ctrl+D可推出python模式which python #查看python位置</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intel编译器安装教程</title>
      <link href="/2020/04/18/intel-huan-jing/"/>
      <url>/2020/04/18/intel-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="Intel-Parallel-Studio-XE-2019"><a href="#Intel-Parallel-Studio-XE-2019" class="headerlink" title="Intel Parallel Studio XE 2019"></a><strong>Intel Parallel Studio XE 2019</strong></h2><p>注：Intel编译器个人认为安装方便，库很齐全，MKL数学库很强大，对于安装其它软件来说十分便利。另外Intel编译器对于Intel处理器感觉运算速度会提升。</p><p><strong>后续所有软件都将基于Intel编译器安装，其它编译器安装方式请自行搜索。</strong></p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>该软件为商业版，学生可通过学生邮箱再Intel官网上申请教育版。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件编译</p><pre class=" language-sh"><code class="language-sh">sudo su #进入root模式bash install_GUI.sh #图形界面安装bash install.sh #命令界面##根据需要选择安装的库，不清楚可默认。</code></pre><p>2 配置环境变量</p><pre class=" language-sh"><code class="language-sh">vim ~/.bashrc #打开配置文件，按i进入编辑模式source /$dir/parallel_studio_xe_2019.1.053/psxevars.sh intel64 #添加该命令后保存退出。该命令可自动加载ifort icc MKL库等到环境变量。$dir:intel安装路径##注：Intel一般默认安装在/opt/intel里source ~/.bashrc #修改环境变量</code></pre><p>3 测试</p><pre class=" language-sh"><code class="language-sh">#检测是否有ifort和icc添加到环境变量which ifortwhich icc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BoltzTraP-1.2.5安装教程</title>
      <link href="/2020/04/18/boltztrap1-2-5-an-zhuang/"/>
      <url>/2020/04/18/boltztrap1-2-5-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="BoltzTraP-1-2-5安装教程"><a href="#BoltzTraP-1-2-5安装教程" class="headerlink" title="BoltzTraP-1.2.5安装教程"></a><strong>BoltzTraP-1.2.5安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>小木虫网站上应该有。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压文件并进入src文件夹</p><pre class=" language-sh"><code class="language-sh">tar -zxvf BoltzTraP.tar.gzcd boltztrap-1.2.5/src</code></pre><p>2 修改Makefile文件</p><p>修改后的Makefile如下：</p><pre class=" language-makefile"><code class="language-makefile">SHELL <span class="token operator">=</span> /bin/sh<span class="token comment" spellcheck="true"># gfortran</span><span class="token comment" spellcheck="true">#FC = gfortran</span><span class="token comment" spellcheck="true">#FC = gfortran-mp-4.5</span><span class="token comment" spellcheck="true">#FOPT  = -g -march=native -funroll-loops -O3 -ffast-math -fgcse-lm -fgcse-sm -ffast-math -ftree-vectorize -fexternal-blas</span><span class="token comment" spellcheck="true">#FOPT += -g -p -pg -Wall -fbounds-check -finit-integer=-666 -finit-real=nan</span><span class="token comment" spellcheck="true">#LDFLAGS =</span>LIBS <span class="token operator">=</span> -llapack -lblas<span class="token comment" spellcheck="true"># ifort</span>FC <span class="token operator">=</span> ifortFOPT <span class="token operator">=</span> -FR -mp1 -w -prec_div -pc80 -pad -ip -DINTEL_VML<span class="token comment" spellcheck="true">#LDFLAGS = -L/opt/intel/mkl/10.0.1.014/lib/32/ -Vaxlib -static-libcxa -pthread</span><span class="token comment" spellcheck="true">#LIBS = -lmkl_lapack -lmkl_ia32 -lguide</span><span class="token comment" spellcheck="true"># ifort bis: other mkl options</span><span class="token comment" spellcheck="true">#LDFLAGS = $(FOPT) -L/opt/intel/mkl/10.0.1.014/lib/32 -pthread -i-static</span><span class="token comment" spellcheck="true">#LIBS = -lmkl_lapack -lmkl -lguide</span>LDFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FOPT<span class="token punctuation">)</span> -L/<span class="token variable">$MKLROOT/lib/intel64</span> -pthread -i-staticLIBS <span class="token operator">=</span> -lmkl_lapack -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lguide<span class="token comment" spellcheck="true"># generic</span>LINKER  <span class="token operator">=</span>       <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span>LFLAGS  <span class="token operator">=</span> -g <span class="token comment" spellcheck="true">#-pg</span>FGEN <span class="token operator">=</span> DESTDIR <span class="token operator">=</span> .EXECNAME <span class="token operator">=</span> BoltzTraP<span class="token comment" spellcheck="true">###############################################################################</span>FFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FGEN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FOPT<span class="token punctuation">)</span>EXEC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>DESTDIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>EXECNAME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#..............................................................................</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Object files common to both REAL and COMPLEX type subroutines</span><span class="token comment" spellcheck="true">#</span>OBJS <span class="token operator">=</span> gmlib2.o reallocate.o \     m_bandstructure.o m_input.o m_fermimod.o \     m_interfaces.o \     latgen2.o generic_field.o gtfnam.o gen_lattpoints.o \     BoltzTraP.o crystal_band.o wien_band.o phon_band.o generic_band.o pw_interface.o \     add_inv.o bandana.o stern1.o kdelta.o fite4.o sortag.o gplbands.o \     dos.o ifflim.o setfft.o c3fft.o boseintegrals.o fermiintegrals.o bands.o kcomp.o \     bz.o fermisurface.o setfft2.o write_dx_fs.o write_dx_bz.o write_cube_fs.o \     dos_histogram.o dos_tetra.o noculc.o dosvv.o readvv.o \     phonondrag.o<span class="token comment" spellcheck="true">#OBJS =    \#        reallocate.o defs.o modules.o broad.o add_inv.o \#        c3fft.o gtfnam.o ifflim.o mknam.o read_energy.o \#        transport.o stern.o kdelta.o gen_lattpoints.o fite4.o setfft.o \#        starfkt2.o dos.o </span><span class="token symbol"><span class="token variable">$</span>(EXEC)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LINKER<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LFLAGS<span class="token punctuation">)</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>EXEC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LFLAGS<span class="token punctuation">)</span><span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o *.mod *.pc *.pcl *~<span class="token builtin">.SUFFIXES</span><span class="token punctuation">:</span> .F90 .o <span class="token builtin">.F90.o</span><span class="token punctuation">:</span>    <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FFLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span></code></pre><p>修改完成后编译</p><pre class=" language-sh"><code class="language-sh">make</code></pre><p>3 添加到环境变量</p><pre class=" language-sh"><code class="language-sh">vim ~/.bashrc export PATH=/$dir/src:$PATH #$dir：boltztrap-1.2.5安装位置source ~/.bashrc</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><pre class=" language-sh"><code class="language-sh">x_trans BoltzTraP</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP5.4.4安装教程</title>
      <link href="/2020/04/18/vasp-an-zhuang/"/>
      <url>/2020/04/18/vasp-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="VASP-5-4-4-CPU-安装教程"><a href="#VASP-5-4-4-CPU-安装教程" class="headerlink" title="VASP-5.4.4(CPU)安装教程"></a><strong>VASP-5.4.4(CPU)安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>VASP软件需要付费，请自行下载。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 拷贝makefile.include到vasp文件夹</p><pre class=" language-sh"><code class="language-sh">tar -zxvf vasp.tar.gzcd vasp.5.4.4 #根据实际文件名字修改cp ./arch/makefile.include.linux_intel makefile.include #arch里面有很多例子根据需要修改</code></pre><p>2 修改makefile.include</p><pre class=" language-sh"><code class="language-sh">vim makefile.include##如果是Intel编译器，可以直接默认设置</code></pre><p>makefile.include基本如下所示：</p><pre class=" language-makefile"><code class="language-makefile"><span class="token comment" spellcheck="true"># Precompiler options</span>CPP_OPTIONS<span class="token operator">=</span> -DHOST<span class="token operator">=</span>\"LinuxIFC\"\             -DMPI -DMPI_BLOCK<span class="token operator">=</span>8000 \             -Duse_collective \             -DscaLAPACK \             -DCACHE_SIZE<span class="token operator">=</span>8000 \             -Davoidalloc \             -Duse_bse_te \             -Dtbdyn \             -Duse_shmemCPP        <span class="token operator">=</span> fpp -f_com<span class="token operator">=</span>no -free -w0  <span class="token variable">$*$</span><span class="token punctuation">(</span>FUFFIX<span class="token punctuation">)</span> <span class="token variable">$*$</span><span class="token punctuation">(</span>SUFFIX<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OPTIONS<span class="token punctuation">)</span>FC         <span class="token operator">=</span> mpiifortFCL        <span class="token operator">=</span> mpiifort -mkl<span class="token operator">=</span>sequential -lstdc++FREE       <span class="token operator">=</span> -free -names lowercaseFFLAGS     <span class="token operator">=</span> -assume byterecl -wOFLAG      <span class="token operator">=</span> -O2 -xhostOFLAG_IN   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>OFLAG<span class="token punctuation">)</span>DEBUG      <span class="token operator">=</span> -O0MKL_PATH   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64BLAS       <span class="token operator">=</span>LAPACK     <span class="token operator">=</span>BLACS      <span class="token operator">=</span> -lmkl_blacs_intelmpi_lp64SCALAPACK  <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>MKL_PATH<span class="token punctuation">)</span>/libmkl_scalapack_lp64.a <span class="token variable">$</span><span class="token punctuation">(</span>BLACS<span class="token punctuation">)</span>OBJECTS    <span class="token operator">=</span> fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.oINCS       <span class="token operator">=</span>-I<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/<span class="token keyword">include</span>/fftwLLIBS      <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SCALAPACK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LAPACK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>BLAS<span class="token punctuation">)</span>OBJECTS_O1 <span class="token operator">+=</span> fftw3d.o fftmpi.o fftmpiw.oOBJECTS_O2 <span class="token operator">+=</span> fft3dlib.o<span class="token comment" spellcheck="true"># For what used to be vasp.5.lib</span>CPP_LIB    <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP<span class="token punctuation">)</span>FC_LIB     <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span>CC_LIB     <span class="token operator">=</span> iccCFLAGS_LIB <span class="token operator">=</span> -OFFLAGS_LIB <span class="token operator">=</span> -O1FREE_LIB   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FREE<span class="token punctuation">)</span>OBJECTS_LIB<span class="token operator">=</span> linpack_double.o getshmem.o<span class="token comment" spellcheck="true"># For the parser library</span>CXX_PARS   <span class="token operator">=</span> icpcLIBS       <span class="token operator">+=</span> parserLLIBS      <span class="token operator">+=</span> -Lparser -lparser -lstdc++<span class="token comment" spellcheck="true"># Normally no need to change this</span>SRCDIR     <span class="token operator">=</span> ../../srcBINDIR     <span class="token operator">=</span> ../../bin<span class="token comment" spellcheck="true">#================================================</span><span class="token comment" spellcheck="true"># GPU Stuff</span>CPP_GPU    <span class="token operator">=</span> -DCUDA_GPU -DRPROMU_CPROJ_OVERLAP -DUSE_PINNED_MEMORY -DCUFFT_MIN<span class="token operator">=</span>28 -UscaLAPACKOBJECTS_GPU <span class="token operator">=</span> fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d_gpu.o fftmpiw_gpu.oCC         <span class="token operator">=</span> iccCXX        <span class="token operator">=</span> icpcCFLAGS     <span class="token operator">=</span> -fPIC -DADD_ -Wall -openmp -DMAGMA_WITH_MKL -DMAGMA_SETAFFINITY -DGPUSHMEM<span class="token operator">=</span>300 -DHAVE_CUBLASCUDA_ROOT  <span class="token operator">?=</span> /usr/local/cuda/NVCC       <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CUDA_ROOT<span class="token punctuation">)</span>/bin/nvcc -ccbin<span class="token operator">=</span>iccCUDA_LIB   <span class="token operator">:=</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>CUDA_ROOT<span class="token punctuation">)</span>/lib64 -lnvToolsExt -lcudart -lcuda -lcufft -lcublasGENCODE_ARCH    <span class="token operator">:=</span> -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_30,code<span class="token operator">=</span>\"sm_30,compute_30\" \                   -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_35,code<span class="token operator">=</span>\"sm_35,compute_35\" \                   -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_60,code<span class="token operator">=</span>\"sm_60,compute_60\"MPI_INC    <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>I_MPI_ROOT<span class="token punctuation">)</span>/include64/</code></pre><p>3 编译</p><pre class=" language-sh"><code class="language-sh">make all##编译成功会在bin文件夹里生成vasp_std, vasp_gam, vasp_ncl。##只生成其中一个命令，例如vasp_stdmake vasp_std #绝大多数vasp计算只需用到vasp_std</code></pre><p>4 配置环境变量</p><pre class=" language-sh"><code class="language-sh">vim ~/.bashrc#添加路径export PATH=/$dir/bin:$PATH #$dir：vasp安装地址。source ~/.bashrcwhich vasp_std #检查是否配置成功</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p>```sh<br>mpirun -np 8 vasp_std &gt; vasp.log #实时输出结果在vasp.log中</p>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thirdorder安装教程</title>
      <link href="/2020/04/18/thirdorder-an-zhuang/"/>
      <url>/2020/04/18/thirdorder-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="thirdorder安装教程"><a href="#thirdorder安装教程" class="headerlink" title="thirdorder安装教程"></a><strong>thirdorder安装教程</strong></h2><p>产生用于三阶力常数计算的文件</p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="http://www.shengbte.org/downloads" target="_blank" rel="noopener">http://www.shengbte.org/downloads</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件夹</p><pre class=" language-sh"><code class="language-sh">tar -jxvf thirdorder-v1.1.1-8526f47.tar.bz2cd thirdorder</code></pre><p>2 修改setup.py 加入spglib的库路径</p><p>修改后如下</p><p>注：如果include文件夹里没有spglib文件夹，手动建一个并把spglib.h拷贝进去就行。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span><span class="token keyword">import</span> numpy<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>extension <span class="token keyword">import</span> Extension<span class="token comment" spellcheck="true"># Add the location of the "spglib/spglib.h" to this list if necessary.</span><span class="token comment" spellcheck="true"># Example: INCLUDE_DIRS=["/home/user/local/include"]</span>INCLUDE_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/home/wh/software/spglib-master/usr/local/include"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Add the location of the spglib shared library to this list if necessary.</span><span class="token comment" spellcheck="true"># Example: LIBRARY_DIRS=["/home/user/local/lib"]</span>LIBRARY_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/home/wh/software/spglib-master/usr/local/lib"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Set USE_CYTHON to True if you want include the cythonization in your build</span><span class="token comment" spellcheck="true"># process.</span>USE_CYTHON <span class="token operator">=</span> <span class="token boolean">False</span>ext <span class="token operator">=</span> <span class="token string">".pyx"</span> <span class="token keyword">if</span> USE_CYTHON <span class="token keyword">else</span> <span class="token string">".c"</span>extensions <span class="token operator">=</span> <span class="token punctuation">[</span>    Extension<span class="token punctuation">(</span>        <span class="token string">"thirdorder_core"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"thirdorder_core"</span> <span class="token operator">+</span> ext<span class="token punctuation">]</span><span class="token punctuation">,</span>        include_dirs<span class="token operator">=</span><span class="token punctuation">[</span>numpy<span class="token punctuation">.</span>get_include<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> INCLUDE_DIRS<span class="token punctuation">,</span>        library_dirs<span class="token operator">=</span>LIBRARY_DIRS<span class="token punctuation">,</span>        runtime_library_dirs<span class="token operator">=</span>LIBRARY_DIRS<span class="token punctuation">,</span>        libraries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"symspg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> USE_CYTHON<span class="token punctuation">:</span>    <span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Build <span class="token keyword">import</span> cythonize    extensions <span class="token operator">=</span> cythonize<span class="token punctuation">(</span>extensions<span class="token punctuation">)</span>setup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"thirdorder"</span><span class="token punctuation">,</span> ext_modules<span class="token operator">=</span>extensions<span class="token punctuation">)</span></code></pre><p>修改完成后编译安装</p><pre class=" language-sh"><code class="language-sh">python setup.py install</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p>以VASP程序的POSCAR为例</p><p>1 拷贝源代码中的 thirdorder_common.py 和 thirdorder_vasp.py 两个文件到POSCAR目录下</p><p>2 运行命令</p><pre class=" language-sh"><code class="language-sh">thirdorder_vasp.py sow|reap na nb nc cutoff[nm/-integer]#examplethirdorder_vasp.py sow|reap 6 6 6 0.5 #0.5nm的截断半径thirdorder_vasp.py sow|reap 6 6 6 -3 #第三最近邻截断</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Publications</title>
      <link href="/2020/04/17/publications/"/>
      <url>/2020/04/17/publications/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://doi.org/10.1016/j.ssc.2019.02.004" target="_blank" rel="noopener">Wang Hao, Zhou Yu, Zeng Zhao-Yi, Cheng Yan, Chen Qi-Feng, First-principles study of elastic, thermal and optical properties of a metal-shrouded two-dimensional semiconductor Tl2O, <strong>Solid State Commun.</strong> 293 (2019) 40.</a></p></li><li><p><a href="https://www.sciencedirect.com/science/article/pii/S0022311519303472" target="_blank" rel="noopener">Wang Hao, Lan Jun-Qing, Hu Cui-E, Chen Xiang-Rong, Geng Hua-Yun, Electronic structure, elastic and thermal transport properties of thorium monocarbide based on first-principles study, <strong>J. Nucl. Mater.</strong> 524 (2019) 141.</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ShengBTE安装教程</title>
      <link href="/2020/04/17/shengbte-an-zhuang/"/>
      <url>/2020/04/17/shengbte-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="ShengBTE安装教程"><a href="#ShengBTE安装教程" class="headerlink" title="ShengBTE安装教程"></a><strong>ShengBTE安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="http://www.shengbte.org/downloads" target="_blank" rel="noopener">http://www.shengbte.org/downloads</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -jxvf ShengBTE-v1.1.1-8a63749.tar.bz2<span class="token function">cd</span> ShengBTE/src</code></pre><p>2 修改arch.make文件</p><p>修改后文件如下</p><pre class=" language-makefile"><code class="language-makefile"><span class="token keyword">export</span> FFLAGS<span class="token operator">=</span>-traceback -debug -O2 -static_intel<span class="token keyword">export</span> LDFLAGS<span class="token operator">=</span>/home/wh/software/spglib-master/usr/local/lib/libsymspg.a<span class="token keyword">export</span> MPIFC<span class="token operator">=</span>mpiifortMKL<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_lapack95_lp64.a -Wl,--start-group    \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_intel_lp64.a                \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_sequential.a                \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm<span class="token keyword">export</span> LAPACK<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>MKL<span class="token punctuation">)</span><span class="token keyword">export</span> LIBS<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>LAPACK<span class="token punctuation">)</span></code></pre><p>修改完成后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span></code></pre><p>3 添加环境变量</p><pre class=" language-bash"><code class="language-bash">vim ~/.bashrc<span class="token comment" spellcheck="true">#加入如下命令</span><span class="token function">export</span> PATH<span class="token operator">=</span>/<span class="token variable">$dir</span>/src:<span class="token variable">$PATH</span> <span class="token comment" spellcheck="true">#$dir：ShengBTE文件夹路径</span><span class="token comment" spellcheck="true">#保存退出</span><span class="token function">source</span> ~/.bashrc</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><pre class=" language-bash"><code class="language-bash">mpirun -np 16 ShengBTE 2<span class="token operator">></span>BTE.err <span class="token operator">></span>BTE.out</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

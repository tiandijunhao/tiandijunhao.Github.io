<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KPOINTS测试</title>
      <link href="/2020/04/18/k-dian-ce-shi/"/>
      <url>/2020/04/18/k-dian-ce-shi/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">    MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });</script><h1 id="KPOINTS-或-KSPACING-测试"><a href="#KPOINTS-或-KSPACING-测试" class="headerlink" title="KPOINTS 或 KSPACING 测试"></a><strong>KPOINTS 或 KSPACING 测试</strong></h1><p>必要输入文件：   </p><pre class=" language-bash"><code class="language-bash">k_test.shPOTCARINCAR和POSCAR可在k_test.sh中设置，也可独立给出</code></pre><p>脚本1(k_test.sh):  KPOINTS测试</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#生成vasp静态计算的INCAR</span><span class="token function">cat</span> <span class="token operator">></span> INCAR_static <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  500           <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  -5           <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#SIGMA  =  0.05        (Smearing value in eV; metals:0.2)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-06        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  ISIF   <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V，4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001        <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  KSPACING <span class="token operator">=</span> 0.10<span class="token operator">!</span><span class="token function">cp</span> INCAR_static INCAR<span class="token comment" spellcheck="true">#产生计算所需POSCAR</span><span class="token function">cat</span> <span class="token operator">></span> POSCAR<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si81.0000000000    5.4687280000        0.0000000000        0.0000000000    0.0000000000        5.4687280000        0.0000000000    0.0000000000        0.0000000000        5.4687280000Si8Direct    0.0000000000        0.0000000000        0.0000000000    0.2500000000        0.7500000000        0.7500000000    0.5000000000        0.0000000000        0.5000000000    0.0000000000        0.5000000000        0.5000000000    0.5000000000        0.5000000000        0.0000000000    0.7500000000        0.2500000000        0.7500000000    0.7500000000        0.7500000000        0.2500000000    0.2500000000        0.2500000000        0.2500000000<span class="token operator">!</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 6 3 15<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#K点从6-24，步数为3</span><span class="token keyword">do</span><span class="token comment" spellcheck="true">#生成KPOINTS文件，K点类型：Monkhorst-Pack (M) 或者 Gamma (G)</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Automatic mesh0Monkhorst-Pack<span class="token variable">$i</span> <span class="token variable">$i</span> <span class="token variable">$i</span>0  0  0<span class="token operator">!</span><span class="token keyword">echo</span> <span class="token string">"KPOINTS = <span class="token variable">$i</span>"</span> <span class="token punctuation">;</span> <span class="token function">time</span> mpirun -n 16 vasp_std <span class="token comment" spellcheck="true">#vasp并行运行命令，根据系统自行修改</span><span class="token function">rm</span> KPOINTS<span class="token comment" spellcheck="true">#提取计算得到的能量</span>E<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"TOTEN"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token variable">$E</span> <span class="token operator">>></span>kpoints_energy.out<span class="token keyword">done</span></code></pre><p>提交脚本任务运行，成功结束后可以得到输出文件kpoints_enengy.out<br>可以使用OriginPro等画图工具画出kpoints-能量关系</p><p>Si的KPOINTS测试</p><img src="/img/Si_kpoints_test.png" width = "40%" height = "40%" div align=center/><p>根据收敛性，大概选择KPOINTS为$9\times9\times9$<br><br /><br><br /></p><p>脚本2(k_test.sh):  KSPACING测试</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#产生计算所需POSCAR</span><span class="token function">cat</span> <span class="token operator">></span> POSCAR<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si81.0000000000    5.4687280000        0.0000000000        0.0000000000    0.0000000000        5.4687280000        0.0000000000    0.0000000000        0.0000000000        5.4687280000Si8Direct    0.0000000000        0.0000000000        0.0000000000    0.2500000000        0.7500000000        0.7500000000    0.5000000000        0.0000000000        0.5000000000    0.0000000000        0.5000000000        0.5000000000    0.5000000000        0.5000000000        0.0000000000    0.7500000000        0.2500000000        0.7500000000    0.7500000000        0.7500000000        0.2500000000    0.2500000000        0.2500000000        0.2500000000<span class="token operator">!</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 0.5 -0.05 0.1<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#K点密度从0.5-0.1，步数为0.05</span><span class="token keyword">do</span><span class="token comment" spellcheck="true">#生成vasp静态计算的INCAR</span><span class="token function">cat</span> <span class="token operator">></span> INCAR_static <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  500           <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  -5           <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#SIGMA  =  0.05        (Smearing value in eV; metals:0.2)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-06        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  ISIF   <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V，4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001        <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  KSPACING <span class="token operator">=</span> <span class="token variable">$i</span>   KGAMMA <span class="token operator">=</span> .FALSE.       <span class="token comment" spellcheck="true">#(true: GAMMA; false: Monkhorst-Pack )</span><span class="token operator">!</span><span class="token function">cp</span> INCAR_static INCAR<span class="token keyword">echo</span> <span class="token string">"KPOINTS = <span class="token variable">$i</span>"</span> <span class="token punctuation">;</span> <span class="token function">time</span> mpirun -n 16 vasp_std <span class="token comment" spellcheck="true">#vasp并行运行命令，根据系统自行修改</span><span class="token function">rm</span> INCAR_static<span class="token function">rm</span> INCAR<span class="token comment" spellcheck="true">#提取计算得到的能量</span>E<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"TOTEN"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token variable">$E</span> <span class="token operator">>></span>kspace_energy.out<span class="token keyword">done</span></code></pre><p><strong>注：Auto mesh模式下。 $KPONITSnumber = max(1,|\vec{b}|/(2\pi\times{KSPACING}))$<br>另外，后续介绍中，主要使用的是KPOINTS文件，KSPACING可以根据自行需要选择使用。</strong></p><p>提交脚本任务运行，成功结束后可以得到输出文件kspace_enengy.out<br>可以使用OriginPro等画图工具画出k点密度-能量关系。 </p><p>Si的KSPACE测试</p><img src="/img/Si_kspace_test.png" width = "40%" height = "40%" div align=center/><p>根据能量收敛判断，选择K点密度为0.15较为合适。</p>]]></content>
      
      
      <categories>
          
          <category> VASP计算笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截断能测试</title>
      <link href="/2020/04/18/encut-test/"/>
      <url>/2020/04/18/encut-test/</url>
      
        <content type="html"><![CDATA[<h1 id="截断能测试"><a href="#截断能测试" class="headerlink" title="截断能测试"></a><strong>截断能测试</strong></h1><p>必要输入文件：</p><pre class=" language-bash"><code class="language-bash">encut.sh  POTCAR  KPOINTS和POSCAR可以在encut.sh里设置，也可以独立给出。</code></pre><p>encut.sh脚本参考  </p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#生成KPOINTS文件，KPOINTS不能与INCAR中的KSPACING参数共用，二选一</span><span class="token comment" spellcheck="true">#注：KPOINTS文件每行一定要顶格写，不能前面不能空格，不然可能会报错。</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>A0M9  9  90  0  0<span class="token operator">!</span><span class="token comment" spellcheck="true">#产生计算所需POSCAR</span><span class="token function">cat</span> <span class="token operator">></span> POSCAR<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si81.0000000000    5.4687280000        0.0000000000        0.0000000000    0.0000000000        5.4687280000        0.0000000000    0.0000000000        0.0000000000        5.4687280000Si8Direct    0.0000000000        0.0000000000        0.0000000000    0.2500000000        0.7500000000        0.7500000000    0.5000000000        0.0000000000        0.5000000000    0.0000000000        0.5000000000        0.5000000000    0.5000000000        0.5000000000        0.0000000000    0.7500000000        0.2500000000        0.7500000000    0.7500000000        0.7500000000        0.2500000000    0.2500000000        0.2500000000        0.2500000000<span class="token operator">!</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 400 50 700<span class="token variable">)</span></span> <span class="token comment" spellcheck="true">#截断能从450-800，步数为50</span><span class="token keyword">do</span><span class="token comment" spellcheck="true">#生成vasp静态计算的INCAR</span><span class="token function">cat</span> <span class="token operator">></span> INCAR_static <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  <span class="token variable">$i</span>           <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  -5           <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#SIGMA  =  0.05        (Smearing value in eV; metals:0.2)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-06        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  ISIF   <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V，4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001        <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  KSPACING <span class="token operator">=</span> 0.10<span class="token operator">!</span><span class="token function">cp</span> INCAR_static INCAR<span class="token keyword">echo</span> <span class="token string">"ENCUT = <span class="token variable">$i</span> eV"</span> <span class="token punctuation">;</span> <span class="token function">time</span> mpirun -np 16 vasp_std <span class="token comment" spellcheck="true">#vasp并行运行命令，根据系统自行修改</span><span class="token function">rm</span> INCAR_static<span class="token function">rm</span> INCAR<span class="token comment" spellcheck="true">#提取计算得到的能量</span>E<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"TOTEN"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token variable">$E</span> <span class="token operator">>></span>encut_energy.out<span class="token keyword">done</span></code></pre><p>提交脚本任务运行，成功结束后可以得到输出文件encut_enengy.out<br>可以使用OriginPro等画图工具画出截断能-能量关系.  </p><p>Si的截断能测试：<br><img src="/img/Si_encut_test.png" width = "40%" height = "40%" div align=center/></p><p>根据能量的收敛性(收敛值大约达到$0.001eV/atom$)，我们选择截断能500 $eV$。</p>]]></content>
      
      
      <categories>
          
          <category> VASP计算笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声子谱计算</title>
      <link href="/2020/04/18/sheng-zi-pu/"/>
      <url>/2020/04/18/sheng-zi-pu/</url>
      
        <content type="html"><![CDATA[<h2 id="声子谱计算"><a href="#声子谱计算" class="headerlink" title="声子谱计算"></a><strong>声子谱计算</strong></h2><p>主要使用phonopy软件计算声子谱。版本：phonopy-2.1.3</p><h3 id="密度泛函微软理论-线性响应方法-DFPT"><a href="#密度泛函微软理论-线性响应方法-DFPT" class="headerlink" title="密度泛函微软理论/线性响应方法 (DFPT)"></a><strong>密度泛函微软理论/线性响应方法 (DFPT)</strong></h3><p>必要的输入文件：  </p><pre class=" language-sh"><code class="language-sh">INCARKPOINTSPOTCAR-unitcell #优化得到的初始晶胞POTCARband.conf</code></pre><p>1 扩胞得到计算所需的POSCAR</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在Linux终端直接运行命令</span><span class="token comment" spellcheck="true">#1. 生成超胞</span>phonopy -d --dim<span class="token operator">=</span><span class="token string">"2 2 2"</span> -c POSCAR-unitcell <span class="token comment" spellcheck="true">#--dim='2 2 2'表示'x y z'方扩的大小</span><span class="token comment" spellcheck="true">#2. 将生成的SPOSCAR拷贝成POSCAR</span><span class="token function">cp</span> SPOSCAR POSCAR</code></pre><p>2 提交VASP计算</p><p>INCAR设置如下：</p><pre class=" language-txt"><code class="language-txt"> ISMEAR =  0            (Gaussian smearing) SIGMA  =  0.05         (Smearing value in eV) IBRION =  8            (determines the Hessian matrix using DFPT) EDIFF  =  1E-08        (SCF energy convergence; in eV)  PREC   =  Accurate     (Precision level)   ENCUT  =  500          (Cut-off energy for plane wave basis set, in eV)  IALGO  =  38           (Davidson block iteration scheme) LREAL  = .FALSE.       (Projection operators: false) LWAVE  = .FLASE.       (Write WAVECAR or not) LCHARG = .FLASE.       (Write CHGCAR or not)  ADDGRID= .TRUE.        (Increase grid; helps GGA convergence)  NSW    = 1 NELM   = 100 NELMDL = -5</code></pre><p>KPOINTS需适当减小，可以的话最好再进行一次收敛测试<br>注：KPOINTS文件每行一定要顶格写，不能前面不能空格，不然可能会报错。</p><pre class=" language-bash"><code class="language-bash">A0M3  3  30  0  0</code></pre><p>提交VASP计算</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#若未安装作业管理程序，可直接运行下段命令。若安装了作业管理程序，请参考作业理手册。例如PBS作业管理系统。</span>mpirun -np 16 vasp_std <span class="token operator">></span> vasp.log</code></pre><p>PBS作业管理系统提交计算脚本 (根据需要命名，最好以.pbs 或者 .sh结尾)</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span> <span class="token comment" spellcheck="true">#PBS -N phono</span> <span class="token comment" spellcheck="true">#PBS -j oe</span> <span class="token comment" spellcheck="true">#PBS -l nodes=1:ppn=16</span> <span class="token function">cd</span> <span class="token variable">${PBS_O_WORKDIR}</span> mpirun -n 16  vasp.x_std <span class="token operator">></span><span class="token operator">&amp;</span> vasp.log</code></pre><p>将所有文件放到一个文件夹，在终端运行<code>qsub *.pbs</code> or  <code>qsub *.sh</code>  </p><p>3 计算声子谱</p><p>准备band.conf文件，如下所示：(参数含义详见phonopy官网)</p><pre class=" language-conf"><code class="language-conf"> ATOM_NAME =Si DIM = 2 2 2 PRIMITIVE_AXES=Auto MP = 24 24 24 BAND =0.0 0.0 0.0  0.5 0.0 0.5  0.625  0.25  0.625, 0.375 0.375 0.75  00 0.0 0.0  0.5 0.5 0.5 BAND_POINTS = 101 FORCE_CONSTANTS= READ</code></pre><p>获取声子谱后处理步骤</p><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#直接在终端运行</span> <span class="token comment" spellcheck="true">#1. 提取力常数，得到FORCE_CONSTANTS文件。</span> phonopy --fc vasprun.xml <span class="token comment" spellcheck="true">#2. 计算声子谱并保存为pdf格式</span> phonopy -c POSCAR-unitcell band.conf -p -s <span class="token comment" spellcheck="true">#3. 将声子谱进一步输出为数据文件，用于其它软件画图。</span> <span class="token comment" spellcheck="true">#旧版本phonopy</span> bandplot  --gnuplot<span class="token operator">></span> phonon.out <span class="token comment" spellcheck="true">#新版本phonopy</span> phonopy-bandplot --gnuplot <span class="token operator">></span> phonon.out <span class="token comment" spellcheck="true">#phonon.out文件中首行是高对称点在x轴上的坐标</span></code></pre><p><strong>有限位移方法</strong><br>必要的输入文件：  </p><pre class=" language-sh"><code class="language-sh">INCARKPOINTSINCAR-unitcell #优化得到的初始晶胞POTCARband.conf</code></pre><p>扩胞得到计算所需的POSCAR</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在Linux终端直接运行命令</span><span class="token comment" spellcheck="true">#1. 生成超胞</span>phonopy -d --dim<span class="token operator">=</span><span class="token string">"2 2 2"</span> -c POSCAR-unitcell <span class="token comment" spellcheck="true">#--dim='2 2 2'表示'x y z'扩胞的大小</span><span class="token comment" spellcheck="true">#会得到一系列POSCAR-001，POSCAR-002,... 数量由对称性决定。</span><span class="token comment" spellcheck="true">#2. 建立disp-*文件夹，具体数量以生成POSCAR-*的数量决定。将POSCAR-POTCAR, INCAR, KPOINTS放入disp-*文件夹</span><span class="token function">mkdir</span> disp-001<span class="token function">cp</span> POSCAR-001 ./disp-001/POSCAR<span class="token function">cp</span> POTCAR ./disp-001/POTCAR<span class="token function">cp</span> INCAR ./disp-001/INCAR<span class="token function">cp</span> KPOINTS ./disp-001/KPOINTS</code></pre><p>提交VASP计算</p><p>INCAR设置如下(静态计算)：</p><pre class=" language-bash"><code class="language-bash"> PREC <span class="token operator">=</span> Accurate IBRION <span class="token operator">=</span> -1 ENCUT <span class="token operator">=</span> 500 EDIFF <span class="token operator">=</span> 1.0e-08 EDIFFG <span class="token operator">=</span> -0.001 ISMEAR <span class="token operator">=</span> 0 SIGMA <span class="token operator">=</span> 0.05 ALGO <span class="token operator">=</span> 38 LREAL <span class="token operator">=</span> .FALSE. LWAVE <span class="token operator">=</span> .FALSE. LCHARG <span class="token operator">=</span> .FALSE.</code></pre><p>KPOINTS需适当减小，可以的话最好再进行一次收敛测试<br>注：KPOINTS文件每行一定要顶格写，不能前面不能空格，不然可能会报错。</p><pre class=" language-bash"><code class="language-bash">A0M3  3  30  0  0</code></pre><p>提交VASP计算</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#若未安装作业管理程序，可直接运行下段命令。若安装了作业管理程序，请参考作理手册。例如PBS作业管理系统。</span>mpirun -np 16 vasp_std <span class="token operator">></span> vasp.log</code></pre><p>PBS作业管理系统提交计算脚本 (根据需要命名，最好以.pbs 或者 .sh结尾)</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span> <span class="token comment" spellcheck="true">#PBS -N phono</span> <span class="token comment" spellcheck="true">#PBS -j oe</span> <span class="token comment" spellcheck="true">#PBS -l nodes=1:ppn=16</span> <span class="token function">cd</span> <span class="token variable">${PBS_O_WORKDIR}</span> mpirun -n 16  vasp.x_std <span class="token operator">></span><span class="token operator">&amp;</span> vasp.log</code></pre><p>将所有文件放到一个文件夹，在终端运行<code>qsub *.pbs</code> or  <code>qsub *.sh</code>  </p><p>3 计算声子谱</p><p>准备band.conf文件，如下所示：(参数含义详见phonopy官网)</p><pre class=" language-conf"><code class="language-conf"> ATOM_NAME =Si DIM = 2 2 2 PRIMITIVE_AXES=Auto MP = 24 24 24 BAND =0.0 0.0 0.0  0.5 0.0 0.5  0.625  0.25  0.625, 0.375 0.375 0.75  0.0 0.0 0.0  0.5 0.5 0.5 BAND_POINTS = 101 FULL_FORCE_CONSTANTS = .TRUE. FORCE_CONSTANTS= WRITE #生成FORCE_CONSTANTS </code></pre><p>准备mesh.conf文件，如下所示：  </p><pre class=" language-conf"><code class="language-conf">ATOM_NAME = SiDIM = 2 2 2MP = 24 24 24</code></pre><p>获取声子谱后处理步骤</p><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#直接在终端运行</span> <span class="token comment" spellcheck="true">#1. 提取动力学矩阵，进入disp-*的上一级文件夹</span> phonopy -f ./disp-*/vasprun.xml <span class="token comment" spellcheck="true">#会生成FORCE_SET</span> <span class="token comment" spellcheck="true">#2. 计算声子谱并保存为pdf格式,同时生成FORCE_CONSTANTS</span> phonopy -c POSCAR-unitcell band.conf -p -s <span class="token comment" spellcheck="true">#3. 将声子谱进一步输出为数据文件，用于其它软件画图。</span> <span class="token comment" spellcheck="true">#旧版本phonopy</span> bandplot  --gnuplot<span class="token operator">></span> phonon.out <span class="token comment" spellcheck="true">#新版本phonopy</span> phonopy-bandplot --gnuplot <span class="token operator">></span> phonon.out <span class="token comment" spellcheck="true">#phonon.out文件中首行是高对称点在x轴上的坐标</span></code></pre><img src="/img/Si_phonon.png" width = "40%" height = "40%" div align=center/>]]></content>
      
      
      <categories>
          
          <category> VASP计算笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶格常数计算</title>
      <link href="/2020/04/18/jing-ge-chang-shu-ce-shi/"/>
      <url>/2020/04/18/jing-ge-chang-shu-ce-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="晶格常数测试-Equation-of-state-method"><a href="#晶格常数测试-Equation-of-state-method" class="headerlink" title="晶格常数测试 (Equation of state method)"></a><strong>晶格常数测试 (Equation of state method)</strong></h3><p>必要输入文件</p><pre class=" language-bash"><code class="language-bash">run_a0.shPOTCARINCAR 和 KPOINTS可在run_a0.sh中直接设置，也可以单独给出。EOS.in</code></pre><p>三维立方晶格脚本示例：<br>Si</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">cat</span> <span class="token operator">></span> INCAR.relax <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> F             <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  500          <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># LVTOT  = .TRUE.      (Write total electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># LVHAR  = .TRUE.      (Write ionic + Hartree electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># NELECT =             (No. of electrons: charged cells; be careful)</span>  <span class="token comment" spellcheck="true"># LPLANE = .TRUE.      (Real space distribution; supercells)</span>  <span class="token comment" spellcheck="true"># NPAR   = 4           (Max is no. nodes; don't set for hybrids)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  SIGMA  <span class="token operator">=</span>  0.05         <span class="token punctuation">(</span>Smearing value <span class="token keyword">in</span> eV<span class="token punctuation">;</span> metals:0.2<span class="token punctuation">)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-08        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  NELMIN <span class="token operator">=</span>  6            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>   NSW    <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>  IBRION <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Algorithm: 0-MD<span class="token punctuation">;</span> 1-Quasi-New<span class="token punctuation">;</span> 2-CG<span class="token punctuation">)</span>  ISIF   <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V, 4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001        <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ISYM =  2            (Symmetry: 0=none; 2=GGA; 3=hybrids)</span><span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> INCAR.static <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> F             <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  500          <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># LVTOT  = .TRUE.      (Write total electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># LVHAR  = .TRUE.      (Write ionic + Hartree electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># NELECT =             (No. of electrons: charged cells; be careful)</span>  <span class="token comment" spellcheck="true"># LPLANE = .TRUE.      (Real space distribution; supercells)</span>  <span class="token comment" spellcheck="true"># NPAR   = 4           (Max is no. nodes; don't set for hybrids)</span>  GGA   <span class="token operator">=</span> PEStatic Calculation  ISMEAR <span class="token operator">=</span> -5            <span class="token punctuation">(</span>tetrahedron method <span class="token keyword">for</span> DOS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#LORBIT =  11          (PAW radii for projected DOS)</span>  <span class="token comment" spellcheck="true">#NEDOS  =  2001        (DOSCAR points) </span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-08        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>A0M9  9  90  0  0<span class="token operator">!</span><span class="token keyword">echo</span> <span class="token string">'a0'</span> <span class="token string">'volume'</span> <span class="token string">'free_energy(eV)'</span> <span class="token operator">></span>ev.out<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 5.00 0.05 5.90<span class="token variable">)</span></span><span class="token keyword">do</span><span class="token function">cat</span> <span class="token operator">></span> POSCAR <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si81.0000000000    <span class="token variable">$i</span>                  0.0000000000        0.0000000000    0.0000000000        <span class="token variable">$i</span>                  0.0000000000    0.0000000000        0.0000000000        <span class="token variable">$i</span>Si8Direct    0.0000000000        0.0000000000        0.0000000000    0.2500000000        0.7500000000        0.7500000000    0.5000000000        0.0000000000        0.5000000000    0.0000000000        0.5000000000        0.5000000000    0.5000000000        0.5000000000        0.0000000000    0.7500000000        0.2500000000        0.7500000000    0.7500000000        0.7500000000        0.2500000000    0.2500000000        0.2500000000        0.2500000000<span class="token operator">!</span><span class="token comment" spellcheck="true">#优化计算</span><span class="token function">cp</span> INCAR.relax INCAR<span class="token keyword">echo</span> <span class="token string">"a=<span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -n 16 vasp_std<span class="token function">cp</span> CONTCAR POSCAR<span class="token function">rm</span> INCAR<span class="token comment" spellcheck="true">#静态计算</span><span class="token function">cp</span> INCAR.static INCAR<span class="token keyword">echo</span> <span class="token string">"a=<span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -n 16 vasp_stdV<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"volume"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span>E<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"TOTEN"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token variable">$V</span> <span class="token variable">$E</span> <span class="token operator">>></span> ev.out<span class="token function">rm</span> INCAR<span class="token keyword">done</span></code></pre><p>提交脚本运算后得到ev.out。<br>利用vaspkit软件进行状态方程拟合。  </p><p>vaspkit需要准EOS.in文件，文件格式及说明如下：</p><pre class=" language-in"><code class="language-in"> cname               : name of crystal up to 256 characters natoms              : number of atoms in unit cell etype               : equation of state type (see below) vplt1, vplt2, nvplt : volume interval over which to plot energy, pressure etc.                       as well as the number of points in the plot nevpt               : number of energy-volume points to be inputted vpt(i) ept(i)       : energy-volume points (VASP units)Note that the input units are VASP default untis (i.e., A^3 and eV).The equations of state currently implemented are: 1. Universal EOS (Vinet P et al., J. Phys.: Condens. Matter 1, p1941 (1989)) 2. Murnaghan EOS (Murnaghan F D, Am. J. Math. 49, p235 (1937)) 3. Birch-Murnaghan 3rd-order EOS (Birch F, Phys. Rev. 71, p809 (1947)) 4. Birch-Murnaghan 4th-order EOS 5. Natural strain 3rd-order EOS (Poirier J-P and Tarantola A, Phys. Earth    Planet Int. 109, p1 (1998)) 6. Natural strain 4th-order EOS 7. Cubic polynomial in (V-V0)</code></pre><p>参考例子</p><p>Si</p><pre class=" language-in"><code class="language-in">Si83124.00 206 50019125.000000000 -39.404864520128.790000000 -40.307996560132.650000000 -41.074573950136.590000000 -41.714702140140.610000000 -42.237893500144.700000000 -42.653098650148.880000000 -42.968706720153.130000000 -43.192650580157.460000000 -43.332358630161.880000000 -43.394826990166.380000000 -43.386635660170.950000000 -43.313964240175.620000000 -43.182635890180.360000000 -42.998104870185.190000000 -42.765493980190.110000000 -42.489611560195.110000000 -42.174957610200.200000000 -41.825750520205.380000000 -41.445910010</code></pre><p>运行 <code>vaspkit -task 205</code><br>得到主要的输出文件 PARAM.out 如下：</p><pre class=" language-out"><code class="language-out">SiBirch-Murnaghan 3rd-order EOSBirch F, Phys. Rev. 71, p809 (1947)(Default VASP units: eV, Angstrom etc.)  V0 (A^3)          =            163.6206779 E0 (eV)           =           -43.39626828 B0                =           0.2982734905E-02 B0'               =            4.260966253 B0 (GPa)          =            87.75507591</code></pre><p>通过平衡体积可以得到晶格常数 $a_0=5.4694803016$<br>建议对得到的平衡晶格常数再优化一次。  </p><p>如果不想状态方程拟合，在较高精度下直接使用$ISIF = 3$ 的参数直接弛豫优化晶胞。<br>INCAR示例如下：  </p><pre class=" language-bash"><code class="language-bash">Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> F             <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  500          <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.       <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># LVTOT  = .TRUE.      (Write total electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># LVHAR  = .TRUE.      (Write ionic + Hartree electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># NELECT =             (No. of electrons: charged cells; be careful)</span>  <span class="token comment" spellcheck="true"># LPLANE = .TRUE.      (Real space distribution; supercells)</span>  <span class="token comment" spellcheck="true"># NPAR   = 4           (Max is no. nodes; don't set for hybrids)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  SIGMA  <span class="token operator">=</span>  0.05         <span class="token punctuation">(</span>Smearing value <span class="token keyword">in</span> eV<span class="token punctuation">;</span> metals:0.2<span class="token punctuation">)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-08        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  NELMIN <span class="token operator">=</span>  6            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>   NSW    <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>  IBRION <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Algorithm: 0-MD<span class="token punctuation">;</span> 1-Quasi-New<span class="token punctuation">;</span> 2-CG<span class="token punctuation">)</span>  ISIF   <span class="token operator">=</span>  3            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V, 4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001        <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ISYM =  2            (Symmetry: 0=none; 2=GGA; 3=hybrids)</span></code></pre><p>注：在新版本的vaspkit中，给出了更多状态方程及其整个新的拟合流程，具体可参考程序实例。</p><br /><p>二维材料的六方晶格示例：<br>Tl2O</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/sh</span><span class="token function">cat</span> <span class="token operator">></span> INCAR.relax <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> F             <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  600          <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.        <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.        <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># LVTOT  = .TRUE.      (Write total electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># LVHAR  = .TRUE.      (Write ionic + Hartree electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># NELECT =             (No. of electrons: charged cells; be careful)</span>  <span class="token comment" spellcheck="true"># LPLANE = .TRUE.      (Real space distribution; supercells)</span>  <span class="token comment" spellcheck="true"># NPAR   = 4           (Max is no. nodes; don't set for hybrids)</span>Electronic Relaxation  ISMEAR <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Gaussian smearing<span class="token punctuation">;</span> metals:1<span class="token punctuation">)</span>  SIGMA  <span class="token operator">=</span>  0.05         <span class="token punctuation">(</span>Smearing value <span class="token keyword">in</span> eV<span class="token punctuation">;</span> metals:0.2<span class="token punctuation">)</span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>    NELMIN <span class="token operator">=</span>  4            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-08        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   GGA  <span class="token operator">=</span>  PE             <span class="token punctuation">(</span>PBEsol exchange-correlation<span class="token punctuation">)</span>Ionic Relaxation  NELMIN <span class="token operator">=</span>  6            <span class="token punctuation">(</span>Min electronic SCF steps<span class="token punctuation">)</span>   NSW    <span class="token operator">=</span>  100          <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>  IBRION <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Algorithm: 0-MD<span class="token punctuation">;</span> 1-Quasi-New<span class="token punctuation">;</span> 2-CG<span class="token punctuation">)</span>  ISIF   <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Stress/relaxation: 2-Ions, 3-Shape/Ions/V, 4-Shape/Ions<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001         <span class="token punctuation">(</span>Ionic convergence<span class="token punctuation">;</span> eV/AA<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ISYM =  2            (Symmetry: 0=none; 2=GGA; 3=hybrids)</span><span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> INCAR.static <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Global Parameters  ISTART <span class="token operator">=</span>  0            <span class="token punctuation">(</span>Read existing wavefunction<span class="token punctuation">;</span> <span class="token keyword">if</span> there<span class="token punctuation">)</span>  ICHARG <span class="token operator">=</span>  2            <span class="token punctuation">(</span>Non-self-consistent: GGA/LDA band structures<span class="token punctuation">)</span>  LREAL  <span class="token operator">=</span> F             <span class="token punctuation">(</span>Projection operators: automatic<span class="token punctuation">)</span>  ENCUT  <span class="token operator">=</span>  600          <span class="token punctuation">(</span>Cut-off energy <span class="token keyword">for</span> plane wave basis set, <span class="token keyword">in</span> eV<span class="token punctuation">)</span>   PREC   <span class="token operator">=</span>  Accurate     <span class="token punctuation">(</span>Precision level<span class="token punctuation">)</span>    LWAVE  <span class="token operator">=</span> .FALSE.        <span class="token punctuation">(</span>Write WAVECAR or not<span class="token punctuation">)</span>  LCHARG <span class="token operator">=</span> .FALSE.        <span class="token punctuation">(</span>Write CHGCAR or not<span class="token punctuation">)</span>   ADDGRID<span class="token operator">=</span> .TRUE.        <span class="token punctuation">(</span>Increase grid<span class="token punctuation">;</span> helps GGA convergence<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># LVTOT  = .TRUE.      (Write total electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># LVHAR  = .TRUE.      (Write ionic + Hartree electrostatic potential into LOCPOT or not)</span>  <span class="token comment" spellcheck="true"># NELECT =             (No. of electrons: charged cells; be careful)</span>  <span class="token comment" spellcheck="true"># LPLANE = .TRUE.      (Real space distribution; supercells)</span>  <span class="token comment" spellcheck="true"># NPAR   = 4           (Max is no. nodes; don't set for hybrids)</span>  GGA   <span class="token operator">=</span> PEStatic Calculation  ISMEAR <span class="token operator">=</span> -5           <span class="token punctuation">(</span>tetrahedron method <span class="token keyword">for</span> DOS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#SIGMA = 0.05</span>  <span class="token comment" spellcheck="true">#LORBIT =  11           (PAW radii for projected DOS)</span>  <span class="token comment" spellcheck="true">#NEDOS  =  2001         (DOSCAR points) </span>  NELM   <span class="token operator">=</span>  60           <span class="token punctuation">(</span>Max electronic SCF steps<span class="token punctuation">)</span>  EDIFF  <span class="token operator">=</span>  1E-08        <span class="token punctuation">(</span>SCF energy convergence<span class="token punctuation">;</span> <span class="token keyword">in</span> eV<span class="token punctuation">)</span>  EDIFFG <span class="token operator">=</span> -0.001<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>A0G12 12 10  0  0<span class="token operator">!</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 3.10 0.05 4.10<span class="token variable">)</span></span><span class="token keyword">do</span>j<span class="token operator">=</span>`echo <span class="token string">"<span class="token variable">$i</span> * 0.5000000000"</span><span class="token operator">|</span><span class="token function">bc</span><span class="token variable"><span class="token variable">`</span>k<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$i</span> * 0.8660254038"</span><span class="token operator">|</span>bc`<span class="token function">cat</span> <span class="token operator">></span> POSCAR <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Tl2O1.0 <span class="token variable">$i</span>               0.00000000000    0.00000000000-<span class="token variable">$j</span>               <span class="token variable">$k</span>               0.00000000000 0.00000000000    0.00000000000   25.00000000000Tl O2  1Direct  0.3333330099999969  0.6666670059999973  0.5606771909028483  0.6666669459999994  0.3333329709999973  0.4393227710971557  0.0000000000000000  0.0000000000000000  0.5000000000000000<span class="token operator">!</span><span class="token function">cp</span> INCAR.relax INCAR<span class="token keyword">echo</span> <span class="token string">"a=<span class="token variable">$j</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -np 16 vasp_std<span class="token function">cp</span> CONTCAR POSCAR<span class="token function">rm</span> INCAR<span class="token function">cp</span> INCAR.static INCAR<span class="token keyword">echo</span> <span class="token string">"a=<span class="token variable">$j</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -np 16 vasp_stdV<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"volume"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span>E<span class="token operator">=</span><span class="token punctuation">$(</span>grep <span class="token string">"TOTEN"</span> OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "%12.9f \n", <span class="token variable">$5</span> }'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$i</span> <span class="token variable">$V</span> <span class="token variable">$E</span> <span class="token operator">>></span> ev.dat<span class="token function">rm</span> POSCAR<span class="token keyword">done</span></code></pre><p>注：对于平面为矩形的二维材料，可以通过修改VASP源代码，直接使用ISIF=3对x、y方向优化。<br>详情见软件编译手册。</p>]]></content>
      
      
      <categories>
          
          <category> VASP计算笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹性常数计算</title>
      <link href="/2020/04/18/er-jie-dan-xing-chang-shu-ji-suan/"/>
      <url>/2020/04/18/er-jie-dan-xing-chang-shu-ji-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="二阶弹性常数计算"><a href="#二阶弹性常数计算" class="headerlink" title="二阶弹性常数计算"></a><strong>二阶弹性常数计算</strong></h2><p>主要采用能量–应变方法</p><h3 id="AELAS软件计算"><a href="#AELAS软件计算" class="headerlink" title="AELAS软件计算"></a><strong>AELAS软件计算</strong></h3><p>必要的文件</p><pre class=" language-bash"><code class="language-bash">elas_strain.shelas_cal.shPOTCARINPOS 优化后的POSCAR。可在脚本设置或者单独给出KPOINTS 可在脚本设置或者单独给出incar_rlx 可在脚本设置或者单独给出incar_stc </code></pre><p>elas_strain.sh脚本参考如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">cat</span> <span class="token operator">></span> INPOS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si8                                     1.00000000000000       5.4684663969085214    0.0000000000000000    0.0000000000000000  0.0000000000000000    5.4684663969085214    0.0000000000000000  0.0000000000000000    0.0000000000000000    5.4684663969085214Si8Direct  0.0000000000000000  0.0000000000000000  0.0000000000000000  0.2500000000000000  0.7500000000000000  0.7500000000000000  0.5000000000000000  0.0000000000000000  0.5000000000000000  0.0000000000000000  0.5000000000000000  0.5000000000000000  0.5000000000000000  0.5000000000000000  0.0000000000000000  0.7500000000000000  0.2500000000000000  0.7500000000000000  0.7500000000000000  0.7500000000000000  0.2500000000000000  0.2500000000000000  0.2500000000000000  0.2500000000000000<span class="token operator">!</span>AELAS -g <span class="token comment" spellcheck="true">#建立不同应变下的POSCAR_I_J。例如：POSCAR_01_001 #二维生成命令 AELAS -g2d</span><span class="token comment" spellcheck="true">#产生优化和静态计算的INCAR</span><span class="token function">cat</span> <span class="token operator">></span> incar_rlx <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>ISTART<span class="token operator">=</span>0ICHARG<span class="token operator">=</span>2PREC<span class="token operator">=</span>AccurateGGA <span class="token operator">=</span> PEADDGRID <span class="token operator">=</span>.TRUE.<span class="token comment" spellcheck="true"># Electronic relaxation</span>ENCUT<span class="token operator">=</span>500EDIFF<span class="token operator">=</span>1E-8ISMEAR<span class="token operator">=</span>0SIGMA<span class="token operator">=</span>0.05NELMIN<span class="token operator">=</span>5<span class="token comment" spellcheck="true"># Ionic relaxation</span>NSW<span class="token operator">=</span>100EDIFFG<span class="token operator">=</span>-1e-3ISIF<span class="token operator">=</span>2IBRION<span class="token operator">=</span>2POTIM<span class="token operator">=</span>0.20<span class="token comment" spellcheck="true"># Other Tags</span><span class="token comment" spellcheck="true">#PSTRESS=</span><span class="token comment" spellcheck="true">#Write flags</span>LWAVE<span class="token operator">=</span>.FALSE.LCHARG<span class="token operator">=</span>.FALSE.<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> incar_stc<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>ISTART<span class="token operator">=</span>0ICHARG<span class="token operator">=</span>2PREC<span class="token operator">=</span>AccurateGGA <span class="token operator">=</span> PEADDGRID <span class="token operator">=</span>.TRUE.<span class="token comment" spellcheck="true"># Electronic relaxation</span>ENCUT<span class="token operator">=</span>500EDIFF<span class="token operator">=</span>1E-8EDIFFG<span class="token operator">=</span>-0.001ISMEAR<span class="token operator">=</span>-5<span class="token comment" spellcheck="true">#SIGMA = 0.05</span>POTIM<span class="token operator">=</span>0.20<span class="token comment" spellcheck="true"># Other Tags</span><span class="token comment" spellcheck="true">#PSTRESS=</span><span class="token comment" spellcheck="true"># Write flags</span>LWAVE<span class="token operator">=</span>.FALSE.LCHARG<span class="token operator">=</span>.FALSE.<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>A0M9  9  90  0  0<span class="token operator">!</span></code></pre><p>运行生成应变后的POSCAR及计算输入文件</p><p>elas_cal.sh脚本设置如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> 01 02 03 <span class="token comment" spellcheck="true">#根据生成的数量设置</span><span class="token keyword">do</span><span class="token keyword">for</span> j <span class="token keyword">in</span> 001 002 003 004 005 006 007 008 009 010 011 012 013<span class="token keyword">do</span><span class="token comment" spellcheck="true">#优化计算</span><span class="token function">cp</span> POS_<span class="token string">"<span class="token variable">$i</span>"</span>_<span class="token variable">$j</span>.vasp POSCAR<span class="token function">cp</span> incar_rlx INCAR<span class="token keyword">echo</span> <span class="token string">"relax I= <span class="token variable">$i</span>,J = <span class="token variable">$j</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -np 16 vasp_std<span class="token comment" spellcheck="true">#静态计算</span><span class="token function">cp</span> CONTCAR POSCAR<span class="token function">rm</span> INCAR<span class="token function">cp</span> incar_stc INCAR<span class="token keyword">echo</span> <span class="token string">"static I= <span class="token variable">$i</span>,J = <span class="token variable">$j</span>"</span><span class="token punctuation">;</span> <span class="token function">time</span> mpirun -np 16 vasp_std<span class="token function">cp</span> OSZICAR OSZICAR_<span class="token string">"<span class="token variable">$i</span>"</span>_<span class="token variable">$j</span><span class="token function">rm</span> INCAR<span class="token keyword">done</span><span class="token keyword">done</span><span class="token comment" spellcheck="true">#计算弹性常数</span>AELAS -d <span class="token comment" spellcheck="true">#二维产生 AELAS -d2d</span></code></pre><p>提交上述脚本计算，成功计算后生成ELADAT文件，形式如下：</p><pre class=" language-txt"><code class="language-txt"> Elastic tensor:   153.04   57.11   57.11    0.00    0.00    0.00   57.11  153.04   57.11    0.00    0.00    0.00   57.11   57.11  153.04    0.00    0.00    0.00    0.00    0.00    0.00   74.71    0.00    0.00    0.00    0.00    0.00    0.00   74.71    0.00    0.00    0.00    0.00    0.00    0.00   74.71 Compliance tensor:   0.008197 -0.002228 -0.002228  0.000000  0.000000  0.000000 -0.002228  0.008197 -0.002228  0.000000  0.000000  0.000000 -0.002228 -0.002228  0.008197  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.013384  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.013384  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.013384 Young's, shear and bulk moduli and Poisson ratio   Voigt approximate:   154.93   64.01   89.09   0.210   Reuss approximate:   149.17   61.09   89.09   0.221   Hill approximate :   152.05   62.55   89.09   0.216 Pugh ratio (G/K):   0.7021 Cauchy pressure (Pc=C12-C44):   -17.60 Elastic Anisotropy Index   Chung-Buessem Anisotropy Index (Ac=(Gv-Gr)/(Gv+Gr)):   0.0234   Universal Elastic Anisotropy Index (Au=5*Gv/Gr+Kv/Kr-6):   0.2396 Elastic Stability Conditions:  Stable</code></pre><br /><hr><h3 id="vaspkit软件"><a href="#vaspkit软件" class="headerlink" title="vaspkit软件"></a><strong>vaspkit软件</strong></h3><p>建议使用惯用晶胞，不要使用原始晶胞。可以借用上面软件的AELAS -d生成的RECELL文件。</p><p>版本1.0.0及以上</p><p>必要的文件</p><pre class=" language-bash"><code class="language-bash">elas_strain.shelas_cal.shPOTCARKPOINTS 可在脚本设置或者单独给出incar_rlx 可在脚本设置或者单独给出incar_stcVPKIT.in 可在脚本设置或者单独给出</code></pre><p>elas_strain.sh脚本参考如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token function">cat</span> <span class="token operator">></span> VPKIT.in <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>1                                                              <span class="token operator">!</span> 1 <span class="token keyword">for</span> prep-rocessing, 2 <span class="token keyword">for</span> post-processing3D                                                             <span class="token operator">!</span> 2D <span class="token keyword">for</span> slab, 3D <span class="token keyword">for</span> bulk13                                                              <span class="token operator">!</span> number of strain-0.018 -0.015 -0.012 -0.009 -0.006 -0.003 0.000 0.003 0.006 0.009 0.012 0.015 0.018 <span class="token operator">!</span> magnitude of strain<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> POSCAR <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>Si81.00000000000000  5.4684663969085214    0.0000000000000000    0.0000000000000000  0.0000000000000000    5.4684663969085214    0.0000000000000000  0.0000000000000000    0.0000000000000000    5.4684663969085214Si8Direct  0.0000000000000000  0.0000000000000000  0.0000000000000000  0.2500000000000000  0.7500000000000000  0.7500000000000000  0.5000000000000000  0.0000000000000000  0.5000000000000000  0.0000000000000000  0.5000000000000000  0.5000000000000000  0.5000000000000000  0.5000000000000000  0.0000000000000000  0.7500000000000000  0.2500000000000000  0.7500000000000000  0.7500000000000000  0.7500000000000000  0.2500000000000000  0.2500000000000000  0.2500000000000000  0.2500000000000000<span class="token operator">!</span><span class="token comment" spellcheck="true">#产生优化和静态计算的INCAR</span><span class="token function">cat</span> <span class="token operator">></span> incar_rlx <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>ISTART<span class="token operator">=</span>0ICHARG<span class="token operator">=</span>2PREC<span class="token operator">=</span>AccurateGGA <span class="token operator">=</span> PEADDGRID <span class="token operator">=</span>.TRUE.<span class="token comment" spellcheck="true"># Electronic relaxation</span>ENCUT<span class="token operator">=</span>500EDIFF<span class="token operator">=</span>1E-8ISMEAR<span class="token operator">=</span>0SIGMA<span class="token operator">=</span>0.05NELMIN<span class="token operator">=</span>5<span class="token comment" spellcheck="true"># Ionic relaxation</span>NSW<span class="token operator">=</span>100EDIFFG<span class="token operator">=</span>-1e-3ISIF<span class="token operator">=</span>2IBRION<span class="token operator">=</span>2POTIM<span class="token operator">=</span>0.20<span class="token comment" spellcheck="true"># Other Tags</span><span class="token comment" spellcheck="true">#PSTRESS=</span><span class="token comment" spellcheck="true">#Write flags</span>LWAVE<span class="token operator">=</span>.FALSE.LCHARG<span class="token operator">=</span>.FALSE.KPAR<span class="token operator">=</span>2<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> incar_stc<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>ISTART<span class="token operator">=</span>0ICHARG<span class="token operator">=</span>2PREC<span class="token operator">=</span>AccurateGGA <span class="token operator">=</span> PEADDGRID <span class="token operator">=</span>.TRUE.<span class="token comment" spellcheck="true"># Electronic relaxation</span>ENCUT<span class="token operator">=</span>500EDIFF<span class="token operator">=</span>1E-8EDIFFG<span class="token operator">=</span>-0.001ISMEAR<span class="token operator">=</span>-5<span class="token comment" spellcheck="true">#SIGMA = 0.05</span>POTIM<span class="token operator">=</span>0.20<span class="token comment" spellcheck="true"># Other Tags</span><span class="token comment" spellcheck="true">#PSTRESS=</span><span class="token comment" spellcheck="true"># Write flags</span>LWAVE<span class="token operator">=</span>.FALSE.LCHARG<span class="token operator">=</span>.FALSE.KPAR<span class="token operator">=</span>2<span class="token operator">!</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>A0M9  9  90  0  0<span class="token operator">!</span>vaspkit -task 201 <span class="token comment" spellcheck="true">#建立不同应变下的POSCAR文件</span></code></pre><p>提交生成应变后的文件夹</p><p>elas_cal.sh脚本设置如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/bash</span>root_path<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span><span class="token keyword">for</span> cij <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -F <span class="token operator">|</span> <span class="token function">grep</span> /$<span class="token variable">`</span></span><span class="token keyword">do</span>  <span class="token function">cd</span> <span class="token variable">${root_path}</span>/<span class="token variable">$cij</span>  <span class="token keyword">for</span> s <span class="token keyword">in</span> strain_*  <span class="token keyword">do</span>    <span class="token function">cd</span> <span class="token variable">${root_path}</span>/<span class="token variable">$cij</span>/<span class="token variable">$s</span>    <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>    <span class="token comment" spellcheck="true">#优化计算</span>    <span class="token function">cp</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/incar_rlx INCAR    <span class="token function">time</span> mpirun -np 16 vasp_std    <span class="token function">rm</span> INCAR    <span class="token comment" spellcheck="true">#静态计算</span>    <span class="token function">cp</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/incar_stc INCAR    <span class="token function">time</span> mpirun -np 16 vasp_std  <span class="token keyword">done</span><span class="token keyword">done</span><span class="token function">cd</span> <span class="token variable">${root_path}</span><span class="token comment" spellcheck="true">#计算弹性常数</span><span class="token function">cat</span> <span class="token operator">></span> VPKIT.in <span class="token operator">&lt;&lt;</span><span class="token operator">!</span>2                                                              <span class="token operator">!</span> 1 <span class="token keyword">for</span> prep-rocessing, 2 <span class="token keyword">for</span> post-processing3D                                                             <span class="token operator">!</span> 2D <span class="token keyword">for</span> slab, 3D <span class="token keyword">for</span> bulk13                                                              <span class="token operator">!</span> number of strain-0.018 -0.015 -0.012 -0.009 -0.006 -0.003 0.000 0.003 0.006 0.009 0.012 0.015 0.018 <span class="token operator">!</span> magnitude of strain<span class="token operator">!</span>vaspkit -task 201 <span class="token operator">></span> elastics.out</code></pre><p>成功计算后生成elastic.out文件，形式如下：</p><pre class=" language-out"><code class="language-out"> +---------------------------------------------------------------+ |             VASPKIT Version: 1.00 (16 Sep. 2019)              | |       A Pre- and Post-Processing Program for VASP Code        | |            Running VASPKIT Under Command-Line Mode            | +---------------------------------------------------------------+  -->> (01) Reading VPKIT.in File... +-------------------------- Warm Tips --------------------------+      See an example in vaspkit/examples/elastic/diamond_3D,      Require the fully-relaxed and standardized Convertional cell. +---------------------------------------------------------------+  -->> (02) Reading Structural Parameters from POSCAR File...  -->> (03) Calculating the fitting coefficients of energy vs strain.  -->> Current directory:  Fitting Precision               C44 Folder:  0.405E-09        C11_C12_I Folder:  0.244E-09       C11_C12_II Folder:  0.744E-08 +-------------------------- Summary ----------------------------+ Based on the Strain versus Energy method. Crystal Class: m-3m Space Group: Fd-3m Crystal System: Cubic system Including Point group classes: 23, 2/m-3, 432, -43m, 4/m-32/m There are 3 independent elastic constants    C11  C12  C12    0    0    0      C12  C11  C12    0    0    0      C12  C12  C11    0    0    0        0    0    0  C44    0    0        0    0    0    0  C44    0        0    0    0    0    0  C44   Stiffness Tensor C_ij (in GPa):    153.056     57.116     57.116      0.000      0.000      0.000     57.116    153.056     57.116      0.000      0.000      0.000     57.116     57.116    153.056      0.000      0.000      0.000      0.000      0.000      0.000     99.411      0.000      0.000      0.000      0.000      0.000      0.000     99.411      0.000      0.000      0.000      0.000      0.000      0.000     99.411 Compliance Tensor S_ij (in GPa^{-1}):   0.008196  -0.002227  -0.002227   0.000000   0.000000   0.000000  -0.002227   0.008196  -0.002227   0.000000   0.000000   0.000000  -0.002227  -0.002227   0.008196   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000   0.010059   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000   0.010059   0.000000   0.000000   0.000000   0.000000   0.000000   0.000000   0.010059 Elastic stability criteria as seen in PRB 90, 224104 (2014). Criteria (i) C11 - C12 > 0 meeted. Criteria (ii) C11 + 2C12 > 0 meeted. Criteria (iii) C44 > 0 meeted. This Structure is Mechanically Stable. Average mechanical properties for polycrystalline: +---------------------------------------------------------------+ |        Scheme             |   Voigt   |   Reuss   |    Hill   | +---------------------------------------------------------------+ |  Bulk modulus K (GPa)     |   89.096  |   89.096  |   89.096  | |  Shear modulus G (GPa)    |   78.835  |   69.569  |   74.202  | |  Young's modulus E (GPa)  |  182.637  |  165.605  |  174.236  | |  P-wave modulus (GPa)     |  194.209  |  181.855  |  188.032  | |  Poisson's ratio v        |    0.158  |    0.190  |    0.174  | |  Bulk/Shear ratio         |    1.130  |    1.281  |    1.201  | +---------------------------------------------------------------+ Pugh Ratio: 0.833 Cauchy Pressure (GPa):  -42.295 Universal Elastic Anisotropy: 0.666 ChungBuessem Anisotropy:    0.062 Isotropic Poissons Ratio: 0.174 Longitudinal wave velocity (in m/s):   9078.421 Transverse wave velocity (in m/s):   5702.983 Average wave velocity (in m/s):   6278.900 Debye temperature (in K):  683.685 References: [1] Voigt W, Lehrbuch der Kristallphysik (1928) [2] Reuss A, Z. Angew. Math. Mech. 9 4958 (1929) [3] Hill R, Proc. Phys. Soc. A 65 34954 (1952) [4] Debye temperature J. Phys. Chem. Solids 24, 909-917 (1963) [5] Elastic wave velocities calculated using Navier's equation +---------------------------------------------------------------+ +---------------------------------------------------------------+ | We Would Appreciate if You Cite in Your Research with VASPKIT.| | Ref: V. Wang, N. Xu, J.C. LIU, G. Tang, et al, VASPKIT: A Pre-| | and Post-Processing Program for VASP Code, arXiv:1908.08269.  | +---------------------------------------------------------------+</code></pre>]]></content>
      
      
      <categories>
          
          <category> VASP计算笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spglib安装教程</title>
      <link href="/2020/04/18/spglib-an-zhuang/"/>
      <url>/2020/04/18/spglib-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Spglib安装教程"><a href="#Spglib安装教程" class="headerlink" title="Spglib安装教程"></a><strong>Spglib安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="https://atztogo.github.io/spglib/index.html" target="_blank" rel="noopener">https://atztogo.github.io/spglib/index.html</a><br>C版本下载：<a href="https://github.com/atztogo/spglib" target="_blank" rel="noopener">https://github.com/atztogo/spglib</a><br>python版本下载：<a href="https://pypi.org/project/spglib/" target="_blank" rel="noopener">https://pypi.org/project/spglib/</a></p><h2 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h2><p><strong>C版本安装编译</strong></p><p>Cmake方法</p><p>1 解压进入文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xvfz spglib-1.9.8.tar.gz<span class="token function">cd</span> spglib-1.9.8</code></pre><p>2 建立_build文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> _build <span class="token operator">&amp;&amp;</span> _buildcmake -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span><span class="token string">""</span> <span class="token punctuation">..</span><span class="token function">make</span><span class="token function">make</span> DESTDIR<span class="token operator">=</span>/some/where <span class="token function">install</span><span class="token comment" spellcheck="true">#路径根据需要设置</span></code></pre><p>注：头文件spglib.h在安装路径include文件夹，如果include文件夹中没有spglib文件夹，建议手动建立一个并复制spglib.h文件到里面。这在后面的安装thirdorder软件时是有用的。</p><p><strong>Python库版本安装</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在线安装</span>pip <span class="token function">install</span> spglib<span class="token comment" spellcheck="true">#手动安装</span><span class="token function">tar</span> -zxvf  spglib-1.14.1.post0.tar.gz spglib<span class="token function">cd</span> ./spglibpython setup.py <span class="token function">install</span></code></pre><p><strong>Spglib的具体使用方法详见官网介绍，主要是作为库来调用</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境安装教程</title>
      <link href="/2020/04/18/python-huan-jing/"/>
      <url>/2020/04/18/python-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="Anaconda安装（python环境安装）"><a href="#Anaconda安装（python环境安装）" class="headerlink" title="Anaconda安装（python环境安装）"></a><strong>Anaconda安装（python环境安装）</strong></h2><p>注：Anaconda里python的第三方包十分丰富，包含了所有的常用包，省却了许多麻烦。本人安装的是python3.6版的Anaconda</p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">https://www.anaconda.com/distribution/</a></p><p>老版本下载网址（清华大学镜像）：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 编译文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-5.2.0-Linux-x86_64.sh <span class="token comment" spellcheck="true">##根据提示选择</span><span class="token comment" spellcheck="true">##注：其中会问你是否添加到环境变量，最好选择yes。</span><span class="token function">source</span> ~/.bashrc <span class="token comment" spellcheck="true">#直接配置环境变量</span><span class="token comment" spellcheck="true">##若选择no</span>vim ~/.bashrc <span class="token comment" spellcheck="true">#按i进入编辑模式</span><span class="token comment" spellcheck="true">###添加如下命令</span><span class="token function">export</span> PATH<span class="token operator">=</span>/<span class="token variable">$dir</span>/bin:<span class="token variable">$PATH</span>  <span class="token comment" spellcheck="true">#$dir:Anaconda安装位置</span><span class="token function">source</span> ~/.bashrc</code></pre><p>2 测试</p><pre class=" language-bash"><code class="language-bash">python <span class="token comment" spellcheck="true">#终端运行，可查看python版本，按住ctrl+D可推出python模式</span><span class="token function">which</span> python <span class="token comment" spellcheck="true">#查看python位置</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intel编译器安装教程</title>
      <link href="/2020/04/18/intel-huan-jing/"/>
      <url>/2020/04/18/intel-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="Intel-Parallel-Studio-XE-2019"><a href="#Intel-Parallel-Studio-XE-2019" class="headerlink" title="Intel Parallel Studio XE 2019"></a><strong>Intel Parallel Studio XE 2019</strong></h2><p>注：Intel编译器个人认为安装方便，库很齐全，MKL数学库很强大，对于安装其它软件来说十分便利。另外Intel编译器对于Intel处理器感觉运算速度会提升。</p><p><strong>后续所有软件都将基于Intel编译器安装，其它编译器安装方式请自行搜索。</strong></p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>该软件为商业版，学生可通过学生邮箱再Intel官网上申请教育版。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件编译</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span> <span class="token comment" spellcheck="true">#进入root模式</span><span class="token function">bash</span> install_GUI.sh <span class="token comment" spellcheck="true">#图形界面安装</span><span class="token function">bash</span> install.sh <span class="token comment" spellcheck="true">#命令界面</span><span class="token comment" spellcheck="true">##根据需要选择安装的库，不清楚可默认。</span></code></pre><p>2 配置环境变量</p><pre class=" language-bash"><code class="language-bash">vim ~/.bashrc <span class="token comment" spellcheck="true">#打开配置文件，按i进入编辑模式</span><span class="token function">source</span> /<span class="token variable">$dir</span>/parallel_studio_xe_2019.1.053/psxevars.sh intel64 <span class="token comment" spellcheck="true">#添加该命令后保存退出。该命令可自动加载ifort icc MKL库等到环境变量。$dir:intel安装路径</span><span class="token comment" spellcheck="true">##注：Intel一般默认安装在/opt/intel里</span><span class="token function">source</span> ~/.bashrc <span class="token comment" spellcheck="true">#修改环境变量</span></code></pre><p>3 测试</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#检测是否有ifort和icc添加到环境变量</span><span class="token function">which</span> ifort<span class="token function">which</span> icc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BoltzTraP-1.2.5安装教程</title>
      <link href="/2020/04/18/boltztrap1-2-5-an-zhuang/"/>
      <url>/2020/04/18/boltztrap1-2-5-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="BoltzTraP-1-2-5安装教程"><a href="#BoltzTraP-1-2-5安装教程" class="headerlink" title="BoltzTraP-1.2.5安装教程"></a><strong>BoltzTraP-1.2.5安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>小木虫网站上应该有。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压文件并进入src文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf BoltzTraP.tar.gz<span class="token function">cd</span> boltztrap-1.2.5/src</code></pre><p>2 修改Makefile文件</p><p>修改后的Makefile如下：</p><pre class=" language-makefile"><code class="language-makefile">SHELL <span class="token operator">=</span> /bin/sh<span class="token comment" spellcheck="true"># gfortran</span><span class="token comment" spellcheck="true">#FC = gfortran</span><span class="token comment" spellcheck="true">#FC = gfortran-mp-4.5</span><span class="token comment" spellcheck="true">#FOPT  = -g -march=native -funroll-loops -O3 -ffast-math -fgcse-lm -fgcse-sm -ffast-math -ftree-vectorize -fexternal-blas</span><span class="token comment" spellcheck="true">#FOPT += -g -p -pg -Wall -fbounds-check -finit-integer=-666 -finit-real=nan</span><span class="token comment" spellcheck="true">#LDFLAGS =</span>LIBS <span class="token operator">=</span> -llapack -lblas<span class="token comment" spellcheck="true"># ifort</span>FC <span class="token operator">=</span> ifortFOPT <span class="token operator">=</span> -FR -mp1 -w -prec_div -pc80 -pad -ip -DINTEL_VML<span class="token comment" spellcheck="true">#LDFLAGS = -L/opt/intel/mkl/10.0.1.014/lib/32/ -Vaxlib -static-libcxa -pthread</span><span class="token comment" spellcheck="true">#LIBS = -lmkl_lapack -lmkl_ia32 -lguide</span><span class="token comment" spellcheck="true"># ifort bis: other mkl options</span><span class="token comment" spellcheck="true">#LDFLAGS = $(FOPT) -L/opt/intel/mkl/10.0.1.014/lib/32 -pthread -i-static</span><span class="token comment" spellcheck="true">#LIBS = -lmkl_lapack -lmkl -lguide</span>LDFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FOPT<span class="token punctuation">)</span> -L/<span class="token variable">$MKLROOT/lib/intel64</span> -pthread -i-staticLIBS <span class="token operator">=</span> -lmkl_lapack -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lguide<span class="token comment" spellcheck="true"># generic</span>LINKER  <span class="token operator">=</span>       <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span>LFLAGS  <span class="token operator">=</span> -g <span class="token comment" spellcheck="true">#-pg</span>FGEN <span class="token operator">=</span> DESTDIR <span class="token operator">=</span> .EXECNAME <span class="token operator">=</span> BoltzTraP<span class="token comment" spellcheck="true">###############################################################################</span>FFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FGEN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FOPT<span class="token punctuation">)</span>EXEC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>DESTDIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>EXECNAME<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#..............................................................................</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Object files common to both REAL and COMPLEX type subroutines</span><span class="token comment" spellcheck="true">#</span>OBJS <span class="token operator">=</span> gmlib2.o reallocate.o \     m_bandstructure.o m_input.o m_fermimod.o \     m_interfaces.o \     latgen2.o generic_field.o gtfnam.o gen_lattpoints.o \     BoltzTraP.o crystal_band.o wien_band.o phon_band.o generic_band.o pw_interface.o \     add_inv.o bandana.o stern1.o kdelta.o fite4.o sortag.o gplbands.o \     dos.o ifflim.o setfft.o c3fft.o boseintegrals.o fermiintegrals.o bands.o kcomp.o \     bz.o fermisurface.o setfft2.o write_dx_fs.o write_dx_bz.o write_cube_fs.o \     dos_histogram.o dos_tetra.o noculc.o dosvv.o readvv.o \     phonondrag.o<span class="token comment" spellcheck="true">#OBJS =    \#        reallocate.o defs.o modules.o broad.o add_inv.o \#        c3fft.o gtfnam.o ifflim.o mknam.o read_energy.o \#        transport.o stern.o kdelta.o gen_lattpoints.o fite4.o setfft.o \#        starfkt2.o dos.o </span><span class="token symbol"><span class="token variable">$</span>(EXEC)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LINKER<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LFLAGS<span class="token punctuation">)</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>EXEC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LFLAGS<span class="token punctuation">)</span><span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o *.mod *.pc *.pcl *~<span class="token builtin">.SUFFIXES</span><span class="token punctuation">:</span> .F90 .o <span class="token builtin">.F90.o</span><span class="token punctuation">:</span>    <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FFLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span></code></pre><p>修改完成后编译</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span></code></pre><p>3 添加到环境变量</p><pre class=" language-bash"><code class="language-bash">vim ~/.bashrc <span class="token function">export</span> PATH<span class="token operator">=</span>/<span class="token variable">$dir</span>/src:<span class="token variable">$PATH</span> <span class="token comment" spellcheck="true">#$dir：boltztrap-1.2.5安装位置</span><span class="token function">source</span> ~/.bashrc</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><pre class=" language-bash"><code class="language-bash">x_trans BoltzTraP</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP5.4.4安装教程</title>
      <link href="/2020/04/18/vasp-an-zhuang/"/>
      <url>/2020/04/18/vasp-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="VASP-5-4-4-CPU-安装教程"><a href="#VASP-5-4-4-CPU-安装教程" class="headerlink" title="VASP-5.4.4(CPU)安装教程"></a><strong>VASP-5.4.4(CPU)安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>VASP软件需要付费，请自行下载。</p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 拷贝makefile.include到vasp文件夹</p><pre class=" language-sh"><code class="language-sh">tar -zxvf vasp.tar.gzcd vasp.5.4.4 #根据实际文件名字修改cp ./arch/makefile.include.linux_intel makefile.include #arch里面有很多例子根据需要修改</code></pre><p>2 修改makefile.include</p><pre class=" language-sh"><code class="language-sh">vim makefile.include##如果是Intel编译器，可以直接默认设置</code></pre><p>makefile.include基本如下所示：</p><pre class=" language-makefile"><code class="language-makefile"><span class="token comment" spellcheck="true"># Precompiler options</span>CPP_OPTIONS<span class="token operator">=</span> -DHOST<span class="token operator">=</span>\"LinuxIFC\"\             -DMPI -DMPI_BLOCK<span class="token operator">=</span>8000 \             -Duse_collective \             -DscaLAPACK \             -DCACHE_SIZE<span class="token operator">=</span>8000 \             -Davoidalloc \             -Duse_bse_te \             -Dtbdyn \             -Duse_shmemCPP        <span class="token operator">=</span> fpp -f_com<span class="token operator">=</span>no -free -w0  <span class="token variable">$*$</span><span class="token punctuation">(</span>FUFFIX<span class="token punctuation">)</span> <span class="token variable">$*$</span><span class="token punctuation">(</span>SUFFIX<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP_OPTIONS<span class="token punctuation">)</span>FC         <span class="token operator">=</span> mpiifortFCL        <span class="token operator">=</span> mpiifort -mkl<span class="token operator">=</span>sequential -lstdc++FREE       <span class="token operator">=</span> -free -names lowercaseFFLAGS     <span class="token operator">=</span> -assume byterecl -wOFLAG      <span class="token operator">=</span> -O2 -xhostOFLAG_IN   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>OFLAG<span class="token punctuation">)</span>DEBUG      <span class="token operator">=</span> -O0MKL_PATH   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64BLAS       <span class="token operator">=</span>LAPACK     <span class="token operator">=</span>BLACS      <span class="token operator">=</span> -lmkl_blacs_intelmpi_lp64SCALAPACK  <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>MKL_PATH<span class="token punctuation">)</span>/libmkl_scalapack_lp64.a <span class="token variable">$</span><span class="token punctuation">(</span>BLACS<span class="token punctuation">)</span>OBJECTS    <span class="token operator">=</span> fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d.oINCS       <span class="token operator">=</span>-I<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/<span class="token keyword">include</span>/fftwLLIBS      <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SCALAPACK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LAPACK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>BLAS<span class="token punctuation">)</span>OBJECTS_O1 <span class="token operator">+=</span> fftw3d.o fftmpi.o fftmpiw.oOBJECTS_O2 <span class="token operator">+=</span> fft3dlib.o<span class="token comment" spellcheck="true"># For what used to be vasp.5.lib</span>CPP_LIB    <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP<span class="token punctuation">)</span>FC_LIB     <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FC<span class="token punctuation">)</span>CC_LIB     <span class="token operator">=</span> iccCFLAGS_LIB <span class="token operator">=</span> -OFFLAGS_LIB <span class="token operator">=</span> -O1FREE_LIB   <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>FREE<span class="token punctuation">)</span>OBJECTS_LIB<span class="token operator">=</span> linpack_double.o getshmem.o<span class="token comment" spellcheck="true"># For the parser library</span>CXX_PARS   <span class="token operator">=</span> icpcLIBS       <span class="token operator">+=</span> parserLLIBS      <span class="token operator">+=</span> -Lparser -lparser -lstdc++<span class="token comment" spellcheck="true"># Normally no need to change this</span>SRCDIR     <span class="token operator">=</span> ../../srcBINDIR     <span class="token operator">=</span> ../../bin<span class="token comment" spellcheck="true">#================================================</span><span class="token comment" spellcheck="true"># GPU Stuff</span>CPP_GPU    <span class="token operator">=</span> -DCUDA_GPU -DRPROMU_CPROJ_OVERLAP -DUSE_PINNED_MEMORY -DCUFFT_MIN<span class="token operator">=</span>28 -UscaLAPACKOBJECTS_GPU <span class="token operator">=</span> fftmpiw.o fftmpi_map.o fft3dlib.o fftw3d_gpu.o fftmpiw_gpu.oCC         <span class="token operator">=</span> iccCXX        <span class="token operator">=</span> icpcCFLAGS     <span class="token operator">=</span> -fPIC -DADD_ -Wall -openmp -DMAGMA_WITH_MKL -DMAGMA_SETAFFINITY -DGPUSHMEM<span class="token operator">=</span>300 -DHAVE_CUBLASCUDA_ROOT  <span class="token operator">?=</span> /usr/local/cuda/NVCC       <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CUDA_ROOT<span class="token punctuation">)</span>/bin/nvcc -ccbin<span class="token operator">=</span>iccCUDA_LIB   <span class="token operator">:=</span> -L<span class="token variable">$</span><span class="token punctuation">(</span>CUDA_ROOT<span class="token punctuation">)</span>/lib64 -lnvToolsExt -lcudart -lcuda -lcufft -lcublasGENCODE_ARCH    <span class="token operator">:=</span> -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_30,code<span class="token operator">=</span>\"sm_30,compute_30\" \                   -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_35,code<span class="token operator">=</span>\"sm_35,compute_35\" \                   -gencode<span class="token operator">=</span>arch<span class="token operator">=</span>compute_60,code<span class="token operator">=</span>\"sm_60,compute_60\"MPI_INC    <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>I_MPI_ROOT<span class="token punctuation">)</span>/include64/</code></pre><p>3 编译</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> all<span class="token comment" spellcheck="true">##编译成功会在bin文件夹里生成vasp_std, vasp_gam, vasp_ncl。</span><span class="token comment" spellcheck="true">##只生成其中一个命令，例如vasp_std</span><span class="token function">make</span> vasp_std <span class="token comment" spellcheck="true">#绝大多数vasp计算只需用到vasp_std</span></code></pre><p>4 配置环境变量</p><pre class=" language-bash"><code class="language-bash">vim ~/.bashrc<span class="token comment" spellcheck="true">#添加路径</span><span class="token function">export</span> PATH<span class="token operator">=</span>/<span class="token variable">$dir</span>/bin:<span class="token variable">$PATH</span> <span class="token comment" spellcheck="true">#$dir：vasp安装地址。</span><span class="token function">source</span> ~/.bashrc<span class="token function">which</span> vasp_std <span class="token comment" spellcheck="true">#检查是否配置成功</span></code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p>```bash<br>mpirun -np 8 vasp_std &gt; vasp.log #实时输出结果在vasp.log中</p>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thirdorder安装教程</title>
      <link href="/2020/04/18/thirdorder-an-zhuang/"/>
      <url>/2020/04/18/thirdorder-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="thirdorder安装教程"><a href="#thirdorder安装教程" class="headerlink" title="thirdorder安装教程"></a><strong>thirdorder安装教程</strong></h2><p>产生用于三阶力常数计算的文件</p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="http://www.shengbte.org/downloads" target="_blank" rel="noopener">http://www.shengbte.org/downloads</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -jxvf thirdorder-v1.1.1-8526f47.tar.bz2<span class="token function">cd</span> thirdorder</code></pre><p>2 修改setup.py 加入spglib的库路径</p><p>修改后如下</p><p>注：如果include文件夹里没有spglib文件夹，手动建一个并把spglib.h拷贝进去就行。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span><span class="token keyword">import</span> numpy<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>extension <span class="token keyword">import</span> Extension<span class="token comment" spellcheck="true"># Add the location of the "spglib/spglib.h" to this list if necessary.</span><span class="token comment" spellcheck="true"># Example: INCLUDE_DIRS=["/home/user/local/include"]</span>INCLUDE_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/home/wh/software/spglib-master/usr/local/include"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Add the location of the spglib shared library to this list if necessary.</span><span class="token comment" spellcheck="true"># Example: LIBRARY_DIRS=["/home/user/local/lib"]</span>LIBRARY_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/home/wh/software/spglib-master/usr/local/lib"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Set USE_CYTHON to True if you want include the cythonization in your build</span><span class="token comment" spellcheck="true"># process.</span>USE_CYTHON <span class="token operator">=</span> <span class="token boolean">False</span>ext <span class="token operator">=</span> <span class="token string">".pyx"</span> <span class="token keyword">if</span> USE_CYTHON <span class="token keyword">else</span> <span class="token string">".c"</span>extensions <span class="token operator">=</span> <span class="token punctuation">[</span>    Extension<span class="token punctuation">(</span>        <span class="token string">"thirdorder_core"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"thirdorder_core"</span> <span class="token operator">+</span> ext<span class="token punctuation">]</span><span class="token punctuation">,</span>        include_dirs<span class="token operator">=</span><span class="token punctuation">[</span>numpy<span class="token punctuation">.</span>get_include<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> INCLUDE_DIRS<span class="token punctuation">,</span>        library_dirs<span class="token operator">=</span>LIBRARY_DIRS<span class="token punctuation">,</span>        runtime_library_dirs<span class="token operator">=</span>LIBRARY_DIRS<span class="token punctuation">,</span>        libraries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"symspg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> USE_CYTHON<span class="token punctuation">:</span>    <span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Build <span class="token keyword">import</span> cythonize    extensions <span class="token operator">=</span> cythonize<span class="token punctuation">(</span>extensions<span class="token punctuation">)</span>setup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"thirdorder"</span><span class="token punctuation">,</span> ext_modules<span class="token operator">=</span>extensions<span class="token punctuation">)</span></code></pre><p>修改完成后编译安装</p><pre class=" language-bash"><code class="language-bash">python setup.py <span class="token function">install</span></code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p>以VASP程序的POSCAR为例</p><p>1 拷贝源代码中的 thirdorder_common.py 和 thirdorder_vasp.py 两个文件到POSCAR目录下</p><p>2 运行命令</p><pre class=" language-bash"><code class="language-bash">thirdorder_vasp.py sow<span class="token operator">|</span>reap na nb nc cutoff<span class="token punctuation">[</span>nm/-integer<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#example</span>thirdorder_vasp.py sow<span class="token operator">|</span>reap 6 6 6 0.5 <span class="token comment" spellcheck="true">#0.5nm的截断半径</span>thirdorder_vasp.py sow<span class="token operator">|</span>reap 6 6 6 -3 <span class="token comment" spellcheck="true">#第三最近邻截断</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Publications</title>
      <link href="/2020/04/17/publications/"/>
      <url>/2020/04/17/publications/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://doi.org/10.1016/j.ssc.2019.02.004" target="_blank" rel="noopener">Wang Hao, Zhou Yu, Zeng Zhao-Yi, Cheng Yan, Chen Qi-Feng, First-principles study of elastic, thermal and optical properties of a metal-shrouded two-dimensional semiconductor Tl2O, <strong>Solid State Commun.</strong> 293 (2019) 40.</a></p></li><li><p><a href="https://www.sciencedirect.com/science/article/pii/S0022311519303472" target="_blank" rel="noopener">Wang Hao, Lan Jun-Qing, Hu Cui-E, Chen Xiang-Rong, Geng Hua-Yun, Electronic structure, elastic and thermal transport properties of thorium monocarbide based on first-principles study, <strong>J. Nucl. Mater.</strong> 524 (2019) 141.</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ShengBTE安装教程</title>
      <link href="/2020/04/17/shengbte-an-zhuang/"/>
      <url>/2020/04/17/shengbte-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="ShengBTE安装教程"><a href="#ShengBTE安装教程" class="headerlink" title="ShengBTE安装教程"></a><strong>ShengBTE安装教程</strong></h2><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><p>官网：<a href="http://www.shengbte.org/downloads" target="_blank" rel="noopener">http://www.shengbte.org/downloads</a></p><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><p>1 解压进入文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -jxvf ShengBTE-v1.1.1-8a63749.tar.bz2<span class="token function">cd</span> ShengBTE/src</code></pre><p>2 修改arch.make文件</p><p>修改后文件如下</p><pre class=" language-makefile"><code class="language-makefile"><span class="token keyword">export</span> FFLAGS<span class="token operator">=</span>-traceback -debug -O2 -static_intel<span class="token keyword">export</span> LDFLAGS<span class="token operator">=</span>/home/wh/software/spglib-master/usr/local/lib/libsymspg.a<span class="token keyword">export</span> MPIFC<span class="token operator">=</span>mpiifortMKL<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_lapack95_lp64.a -Wl,--start-group    \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_intel_lp64.a                \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_sequential.a                \<span class="token variable">$</span><span class="token punctuation">(</span>MKLROOT<span class="token punctuation">)</span>/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm<span class="token keyword">export</span> LAPACK<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>MKL<span class="token punctuation">)</span><span class="token keyword">export</span> LIBS<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>LAPACK<span class="token punctuation">)</span></code></pre><p>修改完成后</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span></code></pre><p>3 添加环境变量</p><pre class=" language-bash"><code class="language-bash">vim ~/.bashrc<span class="token comment" spellcheck="true">#加入如下命令</span><span class="token function">export</span> PATH<span class="token operator">=</span>/<span class="token variable">$dir</span>/src:<span class="token variable">$PATH</span> <span class="token comment" spellcheck="true">#$dir：ShengBTE文件夹路径</span><span class="token comment" spellcheck="true">#保存退出</span><span class="token function">source</span> ~/.bashrc</code></pre><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><pre class=" language-bash"><code class="language-bash">mpirun -np 16 ShengBTE 2<span class="token operator">></span>BTE.err <span class="token operator">></span>BTE.out</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算软件安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
